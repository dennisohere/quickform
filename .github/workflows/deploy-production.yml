name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}

      - name: Add VPS to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_PATH: ${{ secrets.VPS_PATH }}
        run: |
          ssh $VPS_USER@$VPS_HOST << 'EOF'
            cd $VPS_PATH
            
            # Pull latest changes
            git fetch origin
            git reset --hard origin/main
            
            # Copy environment file if it doesn't exist
            if [ ! -f .env ]; then
              cp .env.example .env
            fi
            
            # Build and deploy with Docker Compose
            docker-compose -f docker-compose.prod.yml down
            docker-compose -f docker-compose.prod.yml build --no-cache
            docker-compose -f docker-compose.prod.yml up -d
            
            # Run database migrations
            docker-compose -f docker-compose.prod.yml exec -T app php artisan migrate --force
            
            # Clear caches
            docker-compose -f docker-compose.prod.yml exec -T app php artisan config:clear
            docker-compose -f docker-compose.prod.yml exec -T app php artisan cache:clear
            docker-compose -f docker-compose.prod.yml exec -T app php artisan route:clear
            docker-compose -f docker-compose.prod.yml exec -T app php artisan view:clear
            
            # Optimize for production
            docker-compose -f docker-compose.prod.yml exec -T app php artisan config:cache
            docker-compose -f docker-compose.prod.yml exec -T app php artisan route:cache
            docker-compose -f docker-compose.prod.yml exec -T app php artisan view:cache
            
            # Set proper permissions
            docker-compose -f docker-compose.prod.yml exec -T app chown -R www-data:www-data storage bootstrap/cache
            
            echo "Production deployment completed successfully!"
          EOF

      - name: Health check
        run: |
          sleep 30
          curl -f ${{ secrets.VPS_URL }}/health || exit 1

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Production deployment successful!"
          else
            echo "❌ Production deployment failed!"
          fi
