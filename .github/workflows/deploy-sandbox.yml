name: Deploy to Sandbox

on:
  push:
    branches:
      - sandbox
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: sandbox

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}

      - name: Add VPS to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Generate .env file
        run: |
          echo "${{ vars.APP_ENV }}" > .env

      - name: Add SSL environment variables
        run: |
          # Add SSL configuration using environment variables
          if [ -n "${{ vars.SSL_DOMAIN }}" ] && [ -n "${{ vars.SSL_EMAIL }}" ]; then
            echo "" >> .env
            echo "# SSL Configuration" >> .env
            echo "SSL_DOMAIN=${{ vars.SSL_DOMAIN }}" >> .env
            echo "SSL_EMAIL=${{ vars.SSL_EMAIL }}" >> .env
            echo "SSL_SUBDOMAINS=${{ vars.SSL_SUBDOMAINS || 'www,api' }}" >> .env
          else
            echo "Warning: SSL configuration not found. Please set SSL_DOMAIN and SSL_EMAIL environment variables."
          fi

      - name: Debug .env file
        run: |
          echo "Checking if .env file was generated:"
          ls -la .env
          echo ""
          echo "SSL variables in .env:"
          grep -i ssl .env || echo "No SSL variables found in .env"
          echo ""
          echo "Checking if .env contains PostgreSQL variables:"
          grep -i postgres .env || echo "No PostgreSQL variables found in .env"
          echo ""
          echo "First few lines of .env file:"
          head -10 .env

      - name: Deploy to VPS
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_PATH: ${{ secrets.VPS_PATH }}
          SSL_DOMAIN: ${{ vars.SSL_DOMAIN }}
          SSL_EMAIL: ${{ vars.SSL_EMAIL }}
          SSL_SUBDOMAINS: ${{ vars.SSL_SUBDOMAINS || 'www,api' }}
          DEPLOY_ENV: sandbox
        run: |
          # Copy the generated .env file to the server
          scp .env ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.VPS_PATH }}/.env

          # Copy and execute the deployment script
          chmod +x deploy-script.sh
          ./deploy-script.sh

      - name: Verify deployment
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_PATH: ${{ secrets.VPS_PATH }}
          SSL_DOMAIN: ${{ vars.SSL_DOMAIN }}
        run: |
          echo "Verifying deployment on server:"
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "cd ${{ secrets.VPS_PATH }} && echo 'Docker containers:' && docker-compose ps && echo 'SSL variables in .env:' && grep -i ssl .env || echo 'No SSL variables found'"

      - name: Health check
        run: |
          sleep 30

          # Determine health check URL (prefer SSL)
          if [ -n "${{ vars.SSL_DOMAIN }}" ]; then
            HEALTH_URL="https://${{ vars.SSL_DOMAIN }}/health"
            echo "Testing SSL health check at: $HEALTH_URL"
          else
            HEALTH_URL="${{ secrets.VPS_URL }}/health"
            echo "Testing HTTP health check at: $HEALTH_URL"
          fi

          # Test health endpoint
          curl -f -k "$HEALTH_URL" || exit 1

      - name: SSL verification
        run: |
          sleep 10

          if [ -n "${{ vars.SSL_DOMAIN }}" ]; then
            # Test SSL certificate
            echo "Testing SSL certificate for ${{ vars.SSL_DOMAIN }}..."

            # Check if certificate exists and is valid
            if echo | openssl s_client -servername "${{ vars.SSL_DOMAIN }}" -connect "${{ vars.SSL_DOMAIN }}:443" 2>/dev/null | openssl x509 -noout -dates; then
              echo "‚úÖ SSL certificate is valid"
            else
              echo "‚ùå SSL certificate verification failed"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è No SSL domain configured, skipping SSL verification"
          fi

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "‚úÖ Deployment to sandbox successful!"
            if [ -n "${{ vars.SSL_DOMAIN }}" ]; then
              echo "üîê SSL certificate installed for ${{ vars.SSL_DOMAIN }}"
            else
              echo "‚ö†Ô∏è SSL domain not configured, but SSL-enabled deployment completed"
            fi
          else
            echo "‚ùå Deployment to sandbox failed!"
          fi
