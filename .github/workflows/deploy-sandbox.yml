name: Deploy to Staging

on:
  push:
    branches:
      - sandbox
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}

      - name: Add VPS to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Generate .env file
        run: |
          echo "${{ env.APP_ENV }}" > .env

      - name: Deploy to VPS
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_PATH: ${{ secrets.VPS_PATH }}
        run: |
          # Copy the generated .env file to the server
          scp .env $VPS_USER@$VPS_HOST:$VPS_PATH/.env

          ssh $VPS_USER@$VPS_HOST << 'EOF'
            cd $VPS_PATH

            # Pull latest changes
            git fetch origin
            git reset --hard origin/sandbox

            # Build and deploy with Docker Compose
            docker-compose down
            docker-compose build --no-cache
            docker-compose up -d

            # Run database migrations
            docker-compose exec -T app php artisan migrate --force

            # Clear caches
            docker-compose exec -T app php artisan config:clear
            docker-compose exec -T app php artisan cache:clear
            docker-compose exec -T app php artisan route:clear
            docker-compose exec -T app php artisan view:clear

            # Optimize for production
            docker-compose exec -T app php artisan config:cache
            docker-compose exec -T app php artisan route:cache
            docker-compose exec -T app php artisan view:cache

            # Set proper permissions
            docker-compose exec -T app chown -R www-data:www-data storage bootstrap/cache

            echo "Deployment completed successfully!"
          EOF

      - name: Health check
        run: |
          sleep 30
          curl -f ${{ secrets.VPS_URL }}/health || exit 1

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Deployment to staging successful!"
          else
            echo "❌ Deployment to staging failed!"
          fi
