version: '3.8'

services:
    app:
        build:
            context: .
            dockerfile: Dockerfile
        image: ${PROJECT_NAME:-app}
        restart: unless-stopped
        working_dir: /var/www/
        volumes:
            - code_base:/var/www
        networks:
            - app_network
        depends_on:
            db:
                condition: service_healthy
            redis:
                condition: service_started
        env_file:
            - .env
        environment:
            - SSL_DOMAIN=${SSL_DOMAIN:-}
            - SSL_EMAIL=${SSL_EMAIL:-}
            - SSL_SUBDOMAINS=${SSL_SUBDOMAINS:-www,api}

    db:
        image: postgres:13
        restart: unless-stopped
        env_file:
            - .env
        volumes:
            - db_data:/var/lib/postgresql/data
        networks:
            - app_network
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres} -d ${DB_DATABASE:-app_db}" ]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 30s

    redis:
        image: redis:7-alpine
        container_name: ${PROJECT_NAME:-app}_redis_prod
        restart: unless-stopped
        volumes:
            - redis_data:/data
        networks:
            - app_network

    nginx:
        image: nginx:alpine
        container_name: ${PROJECT_NAME:-app}_nginx_prod
        restart: unless-stopped
        # Use direct port binding by default, but can be overridden
        ports:
            - "${NGINX_PORT_80:-80}:80"
            - "${NGINX_PORT_443:-443}:443"
        volumes:
            - code_base:/var/www
            - ./nginx-ssl.conf:/etc/nginx/nginx.conf:ro
            - /etc/letsencrypt:/etc/letsencrypt:ro
            - ./storage/logs:/var/log/nginx
        networks:
            - app_network
        depends_on:
            - app
        environment:
            - SSL_DOMAIN=${SSL_DOMAIN:-}
            - SSL_EMAIL=${SSL_EMAIL:-}
            - SSL_SUBDOMAINS=${SSL_SUBDOMAINS:-www,api}
        command: >
            sh -c "
              nginx -g 'daemon off;'
            "

    certbot:
        image: certbot/certbot:latest
        container_name: ${PROJECT_NAME:-app}_certbot
        restart: "no"
        volumes:
            - code_base:/var/www
            - /etc/letsencrypt:/etc/letsencrypt
            - /var/lib/letsencrypt:/var/lib/letsencrypt
        networks:
            - app_network
        environment:
            - SSL_DOMAIN=${SSL_DOMAIN:-}
            - SSL_EMAIL=${SSL_EMAIL:-}
            - SSL_SUBDOMAINS=${SSL_SUBDOMAINS:-www,api}
        command: >
            sh -c "
              /var/www/ssl-setup.sh certbot &&
              echo 'SSL setup completed'
            "
        depends_on:
            - nginx

    queue:
        image: ${PROJECT_NAME:-app}
        restart: unless-stopped
        working_dir: /var/www/
        volumes:
            - code_base:/var/www
        networks:
            - app_network
        depends_on:
            db:
                condition: service_healthy
            redis:
                condition: service_started
        env_file:
            - .env
        command: php artisan queue:work --sleep=3 --tries=3 --max-time=3600

    scheduler:
        image: ${PROJECT_NAME:-app}
        restart: unless-stopped
        working_dir: /var/www/
        volumes:
            - code_base:/var/www
        networks:
            - app_network
        depends_on:
            db:
                condition: service_healthy
            redis:
                condition: service_started
        env_file:
            - .env
        command: php artisan schedule:work

volumes:
    code_base:
    db_data:
    redis_data:

networks:
    app_network:
        driver: bridge 